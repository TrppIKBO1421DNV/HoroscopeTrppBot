import telebot
from telebot import types
from os import getenv

from app.controllers.redis_controller import get_zodiacal_forecast, get_chinese_forecast, update_forecasts, \
    get_user_chinese_sign, get_user_zodiacal_sign, add_user_chinese_sign, add_user_zodiacal_sign

from datetime import datetime

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
# from dotenv import load_dotenv
# load_dotenv()

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = getenv('TG_TOKEN')
BASE_URl = getenv('BASE_URL')
TG_SECRET = getenv('TG_SECRET')


bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()


# –°–ª–æ–≤–∞—Ä—å —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞
zodiacal = {
    '–û–≤–µ–Ω ‚ôà': 'aries',
    '–¢–µ–ª–µ—Ü ‚ôâ': 'taurus',
    '–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä': 'gemini',
    '–†–∞–∫ ‚ôã': 'cancer',
    '–õ–µ–≤ ‚ôå': 'lion',
    '–î–µ–≤–∞ ‚ôç': 'virgo',
    '–í–µ—Å—ã ‚ôé': 'libra',
    '–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè': 'scorpio',
    '–°—Ç—Ä–µ–ª–µ—Ü ‚ôê': 'sagittarius',
    '–ö–æ–∑–µ—Ä–æ–≥ ‚ôë': 'capricorn',
    '–í–æ–¥–æ–ª–µ–π ‚ôí': 'aquarius',
    '–†—ã–±—ã ‚ôì': 'pisces'
}

# –°–ª–æ–≤–∞—Ä—å —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏
chinese = {
    '–ö—Ä—ã—Å–∞ üêÄ': 'rat',
    '–í–æ–ª üêÇ': 'ox',
    '–¢–∏–≥—Ä üêÖ': 'tiger',
    '–ó–∞—è—Ü üêá': 'hare',
    '–î—Ä–∞–∫–æ–Ω üêâ': 'dragon',
    '–ó–º–µ—è üêç': 'snake',
    '–õ–æ—à–∞–¥—å üêé': 'horse',
    '–ö–æ–∑–∞ üêê': 'goat',
    '–û–±–µ–∑—å—è–Ω–∞ üêí': 'monk',
    '–ü–µ—Ç—É—Ö üêì': 'cock',
    '–°–æ–±–∞–∫–∞ üêï': 'dog',
    '–°–≤–∏–Ω—å—è üêñ': 'pig'
}


@bot.message_handler(commands=['start', 'help'])
def start_handler(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /start –∏ /help
    –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –æ –±–æ—Ç–µ
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    mes = '–ü—Ä–∏–≤–µ—Ç! –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! ' \
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/forecast`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!'
    bot.reply_to(message, mes, parse_mode='Markdown')


@bot.message_handler(commands=['set_sign'])
def save_user_sign_start(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞ /set_sign
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞–∫–∏ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DD.MM.YYYY')
    bot.register_next_step_handler(message, save_user_sign_finish)


def save_user_sign_finish(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∑–∞–≤–µ—Ä—â–∞—é—â–∞—è –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    try:
        user_id = message.from_user.id
        try:
            birth_date = datetime.strptime(message.text, '%d.%m.%Y')
            add_user_chinese_sign(user_id, birth_date)
            add_user_zodiacal_sign(user_id, birth_date)
            bot.reply_to(message, '–í–∞—à–∏ *–∫–∏—Ç–∞–π—Å–∫–∏–π –∑–Ω–∞–∫* –∏ *–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞* –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                         parse_mode='Markdown')
        except:
            bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! üòµ‚Äçüí´')
    except:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@bot.message_handler(commands=['get_sign'])
def get_user_sign(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞ /get_sign
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∏—Ö —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—è–ª
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    user_id = message.from_user.id
    zodiacal_sign = get_user_zodiacal_sign(user_id)
    chinese_sign = get_user_chinese_sign(user_id)
    if zodiacal_sign and chinese_sign:
        zodiacal_sign_text = list(zodiacal.keys())[list(zodiacal.values()).index(zodiacal_sign)]
        chinese_sign_text = list(chinese.keys())[list(chinese.values()).index(chinese_sign)]
        bot.reply_to(message, '–í–∞—à *–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞*: {}\n'
                              '–í–∞—à *–∫–∏—Ç–∞–π—Å–∫–∏–π –∑–Ω–∞–∫*: {}'.format(zodiacal_sign_text, chinese_sign_text),
                     parse_mode='Markdown')
    else:
        bot.reply_to(message, '–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è! ü§≠')


@bot.message_handler(commands=['forecast'])
def forecast_start(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /forecast
    –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('–ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üîÆ'))
    markup.add(types.KeyboardButton('–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø ü•°'))
    bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø:', reply_markup=markup)
    bot.register_next_step_handler(message, forecast_choice)


@bot.message_handler(func=lambda m: m.text in ['–ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üîÆ', '–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø ü•°'])
def forecast_choice(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /forecast
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞–∫–∏
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    try:
        user_id = message.from_user.id
        if message.text == '–ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üîÆ':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
            user_zodiacal_sign = get_user_zodiacal_sign(user_id)
            if user_zodiacal_sign:
                user_zodiacal_sign_text = '–í–∞—à –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫: {}'.format(
                    list(zodiacal.keys())[list(zodiacal.values()).index(user_zodiacal_sign)]
                )
                markup.row(user_zodiacal_sign_text)
            for sign in zodiacal.keys():
                markup.row(sign)
            bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', reply_markup=markup)
            bot.register_next_step_handler(message, forecast_zodiacal)
        elif message.text == '–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø ü•°':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
            user_chinese_sign = get_user_chinese_sign(user_id)
            if user_chinese_sign:
                user_chinese_sign_text = '–í–∞—à –∫–∏—Ç–∞–π—Å–∫–∏–π –∑–Ω–∞–∫: {}'.format(
                    list(chinese.keys())[list(chinese.values()).index(user_chinese_sign)]
                )
                markup.row(user_chinese_sign_text)
            for sign in chinese.keys():
                markup.row(sign)
            bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–∏–π –∑–Ω–∞–∫', reply_markup=markup)
            bot.register_next_step_handler(message, forecast_chinese)
        else:
            bot.reply_to(message, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@bot.message_handler(func=lambda m: m.text in list(zodiacal.keys()) or m.text.find('–í–∞—à –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫:') == 0)
def forecast_zodiacal(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /forecast
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    try:
        sign_text = message.text
        if '–í–∞—à' in sign_text:
            sign_text = sign_text.split(': ')[-1]
        sign = zodiacal.get(sign_text)
        if not sign:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞! ü§Ø')
            return
        forecast = get_zodiacal_forecast(sign)
        if not forecast:
            bot.reply_to(message, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω üòü')
            return
        bot.reply_to(message, '*–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{}'.format(forecast), parse_mode='Markdown')
    except:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@bot.message_handler(func=lambda m: m.text in list(chinese.keys()) or m.text.find('–í–∞—à –∫–∏—Ç–∞–π—Å–∫–∏–π –∑–Ω–∞–∫:') == 0)
def forecast_chinese(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /forecast
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∑–Ω–∞–∫—É
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return:
    """
    try:
        sign_text = message.text
        if '–í–∞—à' in sign_text:
            sign_text = sign_text.split(': ')[-1]
        sign = chinese.get(sign_text)
        if not sign:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫! ü§ï')
            return
        forecast = get_chinese_forecast(sign)
        if not forecast:
            bot.reply_to(message, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω üòü')
            return
        bot.reply_to(message, '*–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{}'.format(forecast), parse_mode='Markdown')
    except:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


# update_forecasts()
# bot.infinity_polling()


bot.set_webhook('{}/{}'.format(BASE_URl, TG_SECRET))
